name: CI

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
  workflow_dispatch:

env:
  RUSTFLAGS: -Dwarnings
  RUST_BACKTRACE: 1

jobs:
  rustfmt:
    name: rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: sfackler/actions/rustup@master
      - uses: sfackler/actions/rustfmt@master

  clippy:
    name: clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: sfackler/actions/rustup@master
      - run: echo "version=$(rustc --version)" >> $GITHUB_OUTPUT
        id: rust-version
      - uses: actions/cache@v3
        with:
          path: ~/.cargo/registry/index
          key: index-${{ runner.os }}-${{ github.run_number }}
          restore-keys: |
            index-${{ runner.os }}-
      - run: cargo generate-lockfile
      - uses: actions/cache@v3
        with:
          path: ~/.cargo/registry/cache
          key: registry-${{ runner.os }}-${{ steps.rust-version.outputs.version }}-${{ hashFiles('Cargo.lock') }}
      - run: cargo fetch
      - uses: actions/cache@v3
        with:
          path: target
          key: clippy-target-${{ runner.os }}-${{ steps.rust-version.outputs.version }}-${{ hashFiles('Cargo.lock') }}y
      - run: cargo clippy --all --all-targets

  check-wasm32:
    name: check-wasm32
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: sfackler/actions/rustup@master
      - run: echo "version=$(rustc --version)" >> $GITHUB_OUTPUT
        id: rust-version
      - run: rustup target add wasm32-unknown-unknown
      - uses: actions/cache@v3
        with:
          path: ~/.cargo/registry/index
          key: index-${{ runner.os }}-${{ github.run_number }}
          restore-keys: |
            index-${{ runner.os }}-
      - run: cargo generate-lockfile
      - uses: actions/cache@v3
        with:
          path: ~/.cargo/registry/cache
          key: registry-${{ runner.os }}-${{ steps.rust-version.outputs.version }}-${{ hashFiles('Cargo.lock') }}
      - run: cargo fetch
      - uses: actions/cache@v3
        with:
          path: target
          key: check-wasm32-target-${{ runner.os }}-${{ steps.rust-version.outputs.version }}-${{ hashFiles('Cargo.lock') }}
      - run: cargo check --target wasm32-unknown-unknown --manifest-path tokio-postgres/Cargo.toml --no-default-features --features js

  test:
    name: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up a Vertica server docker container
        timeout-minutes: 15
        run: |
          docker run -d -p 5433:5433 -p 5444:5444 \
            --name vertica_docker --network my-network \
            vertica/vertica-ce:23.3.0-0
          echo "Vertica startup ..."
          until docker exec vertica_docker test -f /data/vertica/VMart/agent_start.out; do \
            echo "..."; \
            sleep 3; \
          done;
          echo "Vertica is up"
          docker exec -u dbadmin vertica_docker /opt/vertica/bin/vsql -c "\l"
          docker exec -u dbadmin vertica_docker /opt/vertica/bin/vsql -c "select version()"
      - uses: sfackler/actions/rustup@master
        with:
          version: 1.65.0
      - run: echo "version=$(rustc --version)" >> $GITHUB_OUTPUT
        id: rust-version
      - uses: actions/cache@v3
        with:
          path: ~/.cargo/registry/index
          key: index-${{ runner.os }}-${{ github.run_number }}
          restore-keys: |
            index-${{ runner.os }}-
      - run: cargo generate-lockfile
      - uses: actions/cache@v3
        with:
          path: ~/.cargo/registry/cache
          key: registry-${{ runner.os }}-${{ steps.rust-version.outputs.version }}-${{ hashFiles('Cargo.lock') }}
      - run: cargo fetch
      - uses: actions/cache@v3
        with:
          path: target
          key: test-target-${{ runner.os }}-${{ steps.rust-version.outputs.version }}-${{ hashFiles('Cargo.lock') }}y
      - run: cargo test --all
      - run: cargo test --manifest-path tokio-postgres/Cargo.toml --no-default-features
      - run: cargo test --manifest-path tokio-postgres/Cargo.toml --all-features
